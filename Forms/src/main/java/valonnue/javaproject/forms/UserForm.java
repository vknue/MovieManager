package valonnue.javaproject.forms;

import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import java.util.logging.Level;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.TransferHandler.TransferSupport;
import valonnue.javaproject.Models.Actor;
import valonnue.javaproject.Models.Director;
import valonnue.javaproject.Models.Movie;
import valonnue.javaproject.ViewModels.*;
import valonnue.javaproject.dao.sql.SqlRepository;
import valonnue.javaprojet.parsers.MovieListWrapper;

/**
 *
 * @author valon
 */
public class UserForm extends javax.swing.JFrame {

    private static SqlRepository db = new SqlRepository();

    private static Movie selectedMovie = null;
    private static final String TEMPLATE_ICON = "template/labelicon.jpeg";
    private static final String MOVIE_ID_LABEL = "Movie ID: ";
    private final DefaultListModel includedModel = new DefaultListModel();
    private final DefaultListModel outcludedModel = new DefaultListModel();

    /**
     * Creates new form UserForm
     */
    public UserForm() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDragNDrop = new javax.swing.ButtonGroup();
        btnLogOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserMovies = new javax.swing.JTable();
        lbImage = new javax.swing.JLabel();
        lbMovieID = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        tfBannerPath = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfPublishDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfShowingDate = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lbErrorDescription = new javax.swing.JLabel();
        lbErrorTitle1 = new javax.swing.JLabel();
        lbErrorLink = new javax.swing.JLabel();
        rbActors = new javax.swing.JRadioButton();
        rbDirectors = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstIncluded = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstOutcluded = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnChangePicture = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miSaveXML = new javax.swing.JMenuItem();
        miSaveMovie = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();
        mSettings = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLogOut.setBackground(new java.awt.Color(204, 0, 0));
        btnLogOut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        tblUserMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblUserMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUserMovies);

        lbImage.setIcon(new javax.swing.ImageIcon("C:\\Users\\valon\\Downloads\\_projects\\Java\\JavaProject\\Forms\\template\\labelicon.jpeg")); // NOI18N
        lbImage.setPreferredSize(new java.awt.Dimension(222, 320));

        lbMovieID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbMovieID.setText("Movie ID: -/-");

        jLabel1.setText("Title:");

        jLabel2.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel3.setText("Banner Path:");

        tfBannerPath.setEditable(false);

        jLabel4.setText("Link:");

        jLabel5.setText("Published:");

        tfPublishDate.setEditable(false);

        jLabel6.setText("Showing:");

        tfShowingDate.setEditable(false);

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(102, 102, 255));
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lbErrorDescription.setForeground(new java.awt.Color(204, 0, 0));
        lbErrorDescription.setText("!");

        lbErrorTitle1.setForeground(new java.awt.Color(204, 0, 0));
        lbErrorTitle1.setText("!");

        lbErrorLink.setForeground(new java.awt.Color(204, 0, 0));
        lbErrorLink.setText("!");

        bgDragNDrop.add(rbActors);
        rbActors.setSelected(true);
        rbActors.setText("Actors");
        rbActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbActorsActionPerformed(evt);
            }
        });

        bgDragNDrop.add(rbDirectors);
        rbDirectors.setText("Directors");
        rbDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDirectorsActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(lstIncluded);

        jScrollPane4.setViewportView(lstOutcluded);

        jLabel7.setText("Included");

        jLabel8.setText("Outcluded");

        btnChangePicture.setText("Change Picture");
        btnChangePicture.setEnabled(false);
        btnChangePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePictureActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        miSaveXML.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSaveXML.setText("Save XML");
        miSaveXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveXMLActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveXML);

        miSaveMovie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSaveMovie.setText("Save Movie");
        miSaveMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveMovieActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveMovie);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        mHelp.setText("Help");

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        mHelp.add(miAbout);

        jMenuBar1.add(mHelp);

        mSettings.setText("Settings");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mSettings.add(jMenuItem1);

        jMenuBar1.add(mSettings);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbMovieID, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbActors)
                        .addGap(36, 36, 36)
                        .addComponent(rbDirectors)
                        .addGap(249, 249, 249)
                        .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfShowingDate))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnChangePicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tfBannerPath, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(29, 29, 29)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbErrorLink, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbErrorTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbErrorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(92, 92, 92)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)
                                .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(31, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLogOut)
                            .addComponent(lbMovieID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbActors)
                            .addComponent(rbDirectors))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbErrorTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbErrorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfBannerPath, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbErrorLink, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfShowingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnChangePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        if (!MessageUtils.showConfirmDialog("Log Out?", "Are you sure you want to log out?")) {
            return;
        }
        AuthenticationPanels loginForm = new AuthenticationPanels();
        loginForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        // TODO add your handling code here:
        MessageUtils.showInformationMessage("About", "This project was made for JAVA programming I");
    }//GEN-LAST:event_miAboutActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void tblUserMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserMoviesMouseClicked
        // TODO add your handling code here:

        int selectedRow = tblUserMovies.getSelectedRow();
        try {
            selectedMovie = db.selectMovie((int) tblUserMovies.getValueAt(selectedRow, 0));
            fillFields(selectedMovie);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tblUserMoviesMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (!MessageUtils.showConfirmDialog("You sure?", "Are you sure you want to delete this movie?")) {
            return;
        }
        try {
            db.deleteMovie(selectedMovie.getId());
            initTable();
            clearFields();
            selectedMovie = null;
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        hideErrors();
        if (!FormIsValid()) {
            return;
        }
        Movie updatedMovie = new Movie(
                selectedMovie.getId(),
                tfTitle.getText(),
                taDescription.getText(),
                selectedMovie.getBannerPath(),
                tfLink.getText(),
                selectedMovie.getPublishedDate(),
                selectedMovie.getShowingDate(),
                selectedMovie.getActors(),
                selectedMovie.getDirectors()
        );
        try {
            db.updateMovie(selectedMovie.getId(), updatedMovie);
            initTable();
            clearFields();
            selectedMovie = null;
            MessageUtils.showInformationMessage("Nice", "Movie Updated succesfully");

        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void miSaveXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveXMLActionPerformed
        // TODO add your handling code here:

        try {
            MovieListWrapper wrapper = new MovieListWrapper();
            wrapper.setMovies(db.selectMovies());
            if (wrapper.getMovies().size() == 0) {
                MessageUtils.showInformationMessage("Empty", "There are no movies to Save");
                return;
            }
            JAXBUtils.save(wrapper, "movies.xml");
            MessageUtils.showInformationMessage("Nice", "File saved succesfully");
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miSaveXMLActionPerformed

    private void rbActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbActorsActionPerformed
        try {
            // TODO add your handling code here:

            fillLists(selectedMovie.getActors(), db.selectActors());
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rbActorsActionPerformed

    private void rbDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDirectorsActionPerformed
        try {
            // TODO add your handling code here:
            fillLists(selectedMovie.getDirectors(), db.selectDirectors());
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rbDirectorsActionPerformed

    private void miSaveMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveMovieActionPerformed
        // TODO add your handling code here:
        try {
            if (selectedMovie == null) {
                MessageUtils.showInformationMessage("Empty", "There is no selected movie to Save");
                return;
            }
            JAXBUtils.save(selectedMovie, selectedMovie.getTitle().replaceAll(" ", "_").concat(".xml"));
            MessageUtils.showInformationMessage("Nice", "File saved succesfully");
        } catch (Exception ex) {

            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miSaveMovieActionPerformed

    private void btnChangePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePictureActionPerformed
        // TODO add your handling code here:
        Optional<File> file = FileUtils.uploadFile("Images", "jpeg", "jpg", "png");
        if (file.isPresent()) {
            selectedMovie.setBannerPath(file.get().getAbsolutePath());
        }
        try {
            fillFields(selectedMovie);
        } catch (IOException ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnChangePictureActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgDragNDrop;
    private javax.swing.JButton btnChangePicture;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbErrorDescription;
    private javax.swing.JLabel lbErrorLink;
    private javax.swing.JLabel lbErrorTitle1;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbMovieID;
    private javax.swing.JList<?> lstIncluded;
    private javax.swing.JList<?> lstOutcluded;
    private javax.swing.JMenu mHelp;
    private javax.swing.JMenu mSettings;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miSaveMovie;
    private javax.swing.JMenuItem miSaveXML;
    private javax.swing.JRadioButton rbActors;
    private javax.swing.JRadioButton rbDirectors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblUserMovies;
    private javax.swing.JTextField tfBannerPath;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPublishDate;
    private javax.swing.JTextField tfShowingDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initTable();
            setIcon(new File(TEMPLATE_ICON));
            hideErrors();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTable() throws Exception {
        tblUserMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblUserMovies.setAutoCreateRowSorter(true);
        tblUserMovies.setRowHeight(25);
        MovieTableModel atm = new MovieTableModel(db.selectMovies());
        tblUserMovies.setModel(atm);
    }

    private void setIcon(File img) throws IOException {
        ImageIcon image = IconUtils.createIcon(img, lbImage.getWidth(), lbImage.getHeight());
        lbImage.setIcon(image);
    }

    private void fillFields(Movie movie) throws IOException {
        setIcon(new File(movie.getBannerPath()));
        lbMovieID.setText(MOVIE_ID_LABEL + movie.getId());
        tfTitle.setText(movie.getTitle());
        taDescription.setText(movie.getDescription());
        tfBannerPath.setText(movie.getBannerPath());
        tfLink.setText(movie.getLink());
        tfPublishDate.setText(movie.getPublishedDate().toString());
        tfShowingDate.setText(movie.getShowingDate().toString());
        if (rbActors.isSelected()) {
            try {
                fillLists(selectedMovie.getActors(), db.selectActors());
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                fillLists(selectedMovie.getDirectors(), db.selectDirectors());
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        btnChangePicture.setEnabled(true);

    }

    private void clearFields() throws IOException {
        setIcon(new File(TEMPLATE_ICON));
        lbMovieID.setText(MOVIE_ID_LABEL + "-/-");
        tfTitle.setText("");
        taDescription.setText("");
        tfBannerPath.setText("");
        tfLink.setText("");
        tfPublishDate.setText("");
        tfShowingDate.setText("");
        includedModel.clear();
        lstIncluded.setModel(includedModel);
        outcludedModel.clear();
        lstOutcluded.setModel(outcludedModel);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        btnChangePicture.setEnabled(false);
    }

    private boolean FormIsValid() {
        boolean result = true;
        if (tfTitle.getText().isEmpty()) {
            lbErrorTitle1.setVisible(true);
            result = false;
        }
        if (taDescription.getText().isEmpty()) {
            lbErrorDescription.setVisible(true);
            result = false;
        }
        if (!(tfLink.getText().contains("https://") || tfLink.getText().contains("http://") || tfLink.getText().contains("."))) {
            lbErrorLink.setVisible(false);
            result = false;
        }
        return result;
    }

    private void hideErrors() {
        lbErrorLink.setVisible(false);
        lbErrorDescription.setVisible(false);
        lbErrorTitle1.setVisible(false);
    }

    private <T> void fillLists(Set<T> includedItems, Set<T> outcludedItems) {
        if (includedItems == null) {
            return;
        }
        outcludedModel.clear();
        includedModel.clear();
        includedItems.forEach(includedModel::addElement);
        lstIncluded.setModel(includedModel);
        try {
            outcludedItems.forEach(x -> {
                if (!includedItems.contains(x)) {
                    outcludedModel.addElement(x);
                }
            });
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        lstOutcluded.setModel(outcludedModel);
    }

    private void initDragNDrop() {
        lstIncluded.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstIncluded.setDragEnabled(true);
        lstIncluded.setTransferHandler(new ExportHandler());

        lstOutcluded.setDropMode(DropMode.ON);
        lstOutcluded.setTransferHandler(new ImportHandler());

        lstOutcluded.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstOutcluded.setDragEnabled(true);
        lstOutcluded.setTransferHandler(new ExportHandler());

        lstIncluded.setDropMode(DropMode.ON);
        lstIncluded.setTransferHandler(new ImportHandler());

    }

    private class ExportHandler extends TransferHandler {

        /*
        @Override
        protected Transferable createTransferable(JComponent c) {
            return new ; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        }*/
        @Override
        public int getSourceActions(JComponent c) {
            return COPY; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            Object selectedOutcludedValue = lstOutcluded.getSelectedValue();
            Object selectedIncludedValue = lstIncluded.getSelectedValue();
            if (selectedOutcludedValue instanceof Actor actor) {
                return new StringSelection(String.valueOf(((Actor) selectedOutcludedValue).getId()));
            } else if (selectedOutcludedValue instanceof Director director) {
                return new StringSelection(String.valueOf(((Director) selectedOutcludedValue).getId()));
            } else if (selectedIncludedValue instanceof Actor actor) {
                return new StringSelection(String.valueOf(((Actor) selectedIncludedValue).getId()));
            } else if (selectedIncludedValue instanceof Director director) {
                return new StringSelection(String.valueOf(((Director) selectedIncludedValue).getId()));
            }
            return null;
        }
    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            DataFlavor[] flavors = support.getDataFlavors();
            for (DataFlavor flavor : flavors) {
                if (flavor.equals(DataFlavor.stringFlavor)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            Object selectedOutcludedValue = lstOutcluded.getSelectedValue();
            Object selectedIncludedValue = lstIncluded.getSelectedValue();

            try {
                String data = String.valueOf(transferable.getTransferData(DataFlavor.stringFlavor));
                if (selectedOutcludedValue instanceof Actor actor) {
                    Actor receivedActor = db.selectActor(Integer.parseInt(data));
                    selectedMovie.addActor(receivedActor);
                    fillLists(selectedMovie.getActors(), db.selectActors());
                } else if (selectedOutcludedValue instanceof Director director) {
                    Director receivedDirector = db.selectDirector(Integer.parseInt(data));
                    selectedMovie.addDirector(receivedDirector);
                    fillLists(selectedMovie.getDirectors(), db.selectDirectors());
                }else if (selectedIncludedValue instanceof Actor actor) {
                    Actor receivedActor = db.selectActor(Integer.parseInt(data));
                    selectedMovie.removeActor(receivedActor);
                    fillLists(selectedMovie.getActors(), db.selectActors());
                } else if (selectedIncludedValue instanceof Director director) {
                    Director receivedDirector = db.selectDirector(Integer.parseInt(data));
                    selectedMovie.removeDirector(receivedDirector);
                    fillLists(selectedMovie.getDirectors(), db.selectDirectors());
                }
                return true;
            } catch (IOException ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }

}
